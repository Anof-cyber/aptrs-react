import React, { 
  useState, 
  useEffect,
  ChangeEvent, 
  FormEvent,
  RefObject
} from 'react';
import { useNavigate } from 'react-router-dom';
import {
  StyleTextfield,
  StyleLabel,
  FormErrorMessage,
  ModalErrorMessage,
  CustomRadioButton
} from '../lib/formstyles'
import { withAuth } from "../lib/authutils";
import Button from '../components/button';
import { FormSkeleton } from '../components/skeletons'
import { Select, Option, SelectOptionProps } from "@material-tailwind/react";
import { Vulnerability } from '../lib/data/definitions'
import { upsertCompany} from '../lib/data/api';
import { Company } from '../lib/data/definitions'
import toast from 'react-hot-toast';
interface FormErrors {
  vulnerabilityname?: {
    message: string;
  };
  address?: {
    message: string;
  };
  img?: {
    message: string;
  };
}
//function to break the vulnerabilitycvssvector into an object for form radio buttons
function parseStringToObject(input: string): Record<string, string | null> {
  const pairs = input.split('/').filter(Boolean); // Split string by '/' and remove empty segments
  const result: Record<string, string | null> = {};

  for (const pair of pairs) {
    const [key, value] = pair.split(':'); // Split key-value pairs by ':'
    result[key] = value !== undefined ? value : null;
  }

  return result;
}


//converts an object representation of vulnerabilitycvssvector and converts it to a string like  e.g. CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N"
function updateStringWithKeyValuePair(input: string | null | undefined, key: string, value: string | null): string {
  console.log('update string, got ', key, value)
  if(!input) return ''
  let keyValuePairs: Record<string, string | null> = {};

  if (input) {
    keyValuePairs = parseStringToObject(input);
  }
  keyValuePairs[key] = value;

  const updatedString = Object.entries(keyValuePairs)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
  return updatedString;
}



interface VulnerabilityFormProps {
  id?: string; // Make the ID parameter optional
  forwardedRef?: RefObject<HTMLDialogElement> //handle to the modal this is loaded in
  setRefresh?: React.Dispatch<React.SetStateAction<boolean>> //state function to tell parent to reload data
  onClose: () => void;
}
type VulnerabilityForm = Omit<Vulnerability, 'cvssscore' | 'cvssvector'> & {
  vulnerabilitycvssscore?: number | null | undefined;
  vulnerabilitycvssvector?: string | null | undefined;
};
function VulnerabilityForm({ id: vulId, forwardedRef, setRefresh, onClose }: VulnerabilityFormProps): JSX.Element {
  const [id, setId] = useState(vulId)
  
  const [btnDisabled, setBtnDisabled] = useState(false)
  const [loading, setLoading] = useState(false);
  const [loadingError, setLoadingError] = useState(false);
  const [saveError, setSaveError] = useState('');
  
  
  const [errors, setErrors] = useState<FormErrors>({});
  
  const [formData, setFormData] = useState<VulnerabilityForm>({
      vulnerabilityname: "",
      vulnerabilityseverity: "",
      vulnerabilitydescription: "",
      vulnerabilitysolution: "",
      vulnerabilityreferlnk: "",
      vulnerabilitycvssvector: "CVSS:/AV:/AC:/PR:/UI:/S:/C:/I:/A:",
      vulnerabilitycvssscore: null 
      });
  // const inputString = "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N";
  
  const [scoreData, setScoreData] =useState(parseStringToObject(formData.vulnerabilitycvssvector ?? ""))
 
  

  // useEffect(() => {
  //   // const loadData = async () => {
  //   //   if (id) {
  //   //     setLoading(true);
  //   //     try {
  //   //       const companyData = await getCompany(id) as Company;
          
  //   //       setFormData(companyData);
  //   //     } catch (error) {
  //   //       console.error("Error fetching company data:", error);
  //   //       setLoadingError(true);
  //   //       // Handle error fetching data
  //   //     } finally {
  //   //       setLoading(false);
  //   //     }
  //   //   }
  //   // };

  //   // loadData();
  // }, [id]);
  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  //material-tailwind doesn't use the standard event handler, so this custom function pipes the value to handelChange
  const handleSeverityChange = (value: string | undefined) => {
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["vulnerabilityseverity"]: value,
    }));
}
  const handleScoreChange = (event: React.MouseEvent<HTMLInputElement>): void => {
    console.log('handleScoreChange', event)
    const { name, value } = event.currentTarget;
    setScoreData((prevScoreData) => ({
      ...prevScoreData,
      [name]: value,
    }));
    console.log(name,value)
    const newScoreString = updateStringWithKeyValuePair(formData.vulnerabilitycvssvector, name, value)
    
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["vulnerabilitycvssvector"]: newScoreString,
    }));
    
  };
  const navigate = useNavigate()
  const closeModal = () =>  {
    setId('')
    if(forwardedRef?.current ) {
      forwardedRef.current.close()
    }
    onClose()
  }
  const handleSubmit = async(event: FormEvent<HTMLFormElement>) => {
    setBtnDisabled(true);
    event.preventDefault();
    // Perform your form validation here
    const newErrors: FormErrors = {};
    // Example validation logic (replace with your own)
    if (formData.vulnerabilityname && formData.vulnerabilityname.length < 3) {
      newErrors.vulnerabilityname = { message: 'Name should be at least three characters' };
    }
    if (Object.keys(newErrors).length >  0) {
      setErrors(newErrors);
      console.error('Form failed validation:', newErrors);
    } else {
      try {
        const response = await upsertCompany(formData as Company);
        toast.success('Company saved.')
        if(setRefresh){
          setRefresh(true)
        }
        closeModal()
        // Handle success (e.g., show success message, redirect, etc.)
      } catch (error) {
        console.error('Error submitting form:', error);
        setSaveError(String(error))
        // Handle error (e.g., show error message)
      }
    }
    setBtnDisabled(false);
  }
  
  // if(loading) return <FormSkeleton numInputs={3}/>
  // if (loadingError) return <ModalErrorMessage message={"Error loading company"} />


  return (
    <div className="max-w-lg flex-1 rounded-lg">
      
      <h1 className="mb-3 text-2xl">
        {id ? "Edit" : "Create"} Vulnerability
      </h1>
      {saveError && <FormErrorMessage message={saveError} />}
      <div className="w-full mb-4">
            <label 
              htmlFor="full_name"
              className={StyleLabel}>
              Name
            </label>
            <div className="relative">
              <input
                name="vulnerabilityname"
                id="vulnerabilityname"
                className={StyleTextfield}
                value={formData.vulnerabilityname}
                onChange={handleChange}
                type="text"
                required={true}
              />
              {errors.vulnerabilityname?.message && <FormErrorMessage message={errors.vulnerabilityname.message} />}
            </div>
            <div className="relative">
            <label 
              htmlFor="vulnerabilityseverity"
              className={StyleLabel}>
              Severity
              </label>
            <Select name='vulnerabilityseverity' 
              size="md"
              onChange={handleSeverityChange}
              className='pl-4 pb-1 rounded-md'
              animate={{
                mount: { y: 0 },
                unmount: { y: 25 },
              }}
              value={formData.vulnerabilityseverity} 
              error={true}>
              <Option value="" className='hover:bg-slate-200 p-2'>Select...</Option>
              <Option value="None" className='hover:bg-slate-200 p-2'>None</Option>
              <Option value="Low" className='hover:bg-slate-200 p-2'>Low</Option>
              <Option value="Medium" className='hover:bg-slate-200 p-2'>Medium</Option>
              <Option value="High" className='hover:bg-slate-200 p-2'>High</Option>
              <Option value="Critical" className='hover:bg-slate-200 p-2'>Critical</Option>
            </Select>
            </div>
          </div>
      <fieldset className="mr-4 form-control mb-4 rounded-md p-4 border-2 border-slate-200" >
        <legend className='px-1'>Base Score</legend>
        <div className="flex min-w-1/2">
        
            <div className="column w-full">
              
                
                <fieldset className="mr-4 form-control rounded-md p-1 mt-4" >
                  <legend className='text-sm px-2 mb-0'>Attack Vector</legend>
                  <CustomRadioButton name='AV' label="Network" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='AV' label="Adjacent" value="A" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='AV' label="Local" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='AV' label="Physical" value="P" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
                <fieldset className="mr-4 form-control rounded-md p-1 mt-4" >
                  <legend className='text-sm px-2 mb-0'>Attack Complexity</legend>
                  <CustomRadioButton name='AC' label="Low" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='AC' label="High" value="A" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
                <fieldset className="mr-4 form-control rounded-md p-1 mt-4" >
                  <legend className='text-sm px-2 mb-0'>Privileges Required</legend>
                  <CustomRadioButton name='PR' label="None" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='PR' label="Low" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='PR' label="High" value="H" scoreData={scoreData} onClick={handleScoreChange}/>

                </fieldset>
                <fieldset className="mr-4 form-control rounded-md p-1 mt-4" >
                  <legend className='text-sm px-2 mb-0'>User Interaction</legend>
                  <CustomRadioButton name='UI' label="None" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='UI' label="Required" value="R" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
            </div>
        
            <div className="column w-full">
                <fieldset className="form-control mb-4 rounded-md p-1 mt-4 p-2" >
                  <legend className='text-sm px-2 mb-0'>Scope</legend>
                  <CustomRadioButton name='S' label="Unchanged" value="U" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='S' label="Changed" value="C" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
                <fieldset className="form-control mb-4 rounded-md p-1 mt-4 p-2" >
                  <legend className='text-sm px-2 mb-0'>Confidentiality</legend>
                  <CustomRadioButton name='C' label="None" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='C' label="Low" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='C' label="High" value="H" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
                <fieldset className="form-control mb-4 rounded-md p-1 mt-4 p-2" >
                  <legend className='text-sm px-2 mb-0'>Integrity</legend>
                  <CustomRadioButton name='I' label="None" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='I' label="Low" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='I' label="High" value="H" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
                <fieldset className="form-control mb-4 rounded-md p-1 mt-4 p-2" >
                  <legend className='text-sm px-2 mb-0'>Availability</legend>
                  <CustomRadioButton name='A' label="None" value="N" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='A' label="Low" value="L" scoreData={scoreData} onClick={handleScoreChange}/>
                  <CustomRadioButton name='A' label="High" value="H" scoreData={scoreData} onClick={handleScoreChange}/>
                </fieldset>
            </div>
          
        </div>
      </fieldset>
    </div>
  );
}

export default withAuth(VulnerabilityForm);
