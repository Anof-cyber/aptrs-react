import React, { 
  useState, 
  useEffect,
  ChangeEvent, 
  FormEvent,
  RefObject
} from 'react';
import { useNavigate, useParams } from 'react-router-dom';
// import {Button} from '../components/button'
import {
  StyleTextfield,
  StyleLabel,
  FormErrorMessage,
  
} from '../lib/formstyles'
import { useVulnerabilityColor } from '../lib/customHooks';
import { withAuth } from "../lib/authutils";
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import {
  Tabs,
  TabsHeader,
  TabsBody,
  Tab,
  TabPanel,
  Button,
  Dialog,
  DialogBody
} from "@material-tailwind/react";
import validator from 'validator'
import { XCircleIcon } from '@heroicons/react/24/outline';
import ScoreRadioButton from '../components/score-radio-button'
import { FormSkeleton, InputSkeleton, RowSkeleton } from '../components/skeletons'
import { Vulnerability, Project, ProjectVulnerability } from '../lib/data/definitions'
import { getVulnerability, upsertVulnerability, getProject, addProjectVulnerability} from '../lib/data/api';

import toast from 'react-hot-toast';
import {List} from "@material-tailwind/react";

interface FormErrors {
  vulnerabilityname?: {
    message: string;
  };
  vulnerabilityseverity?: {
    message: string;
  };
  vulnerabilitydescription?: {
    message: string;
  };
  vulnerabilitysolution?: {
    message: string;
  };
  url?: {
    message: string | null;
  };
  parameter?: {
    message: string | null;
  };
}
//function to break the vulnerabilitycvssvector into an object for form radio buttons
function parseStringToObject(input: string): Record<string, string | null> {
  const pairs = input.split('/').filter(Boolean); // Split string by '/' and remove empty segments
  const result: Record<string, string | null> = {};
  for (const pair of pairs) {
    const [key, value] = pair.split(':'); // Split key-value pairs by ':'
    result[key] = value !== undefined ? value : null;
  }
  return result;
}

//converts an object representation of vulnerabilitycvssvector and converts it to a string like  e.g. CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N"
function updateStringWithKeyValuePair(input: string | null | undefined, key: string, value: string | null): string {
  if(!input) return ''
  let keyValuePairs: Record<string, string | null> = {};

  if (input) {
    keyValuePairs = parseStringToObject(input);
  }
  keyValuePairs[key] = value;

  const updatedString = Object.entries(keyValuePairs)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
  return updatedString;
}

type CVSSReturn = {
  success?: boolean
  errorType?: string
  baseMetricScore?: string | number | undefined;
  baseSeverity?: string | number | undefined;
  environmentalMetricScore?: string | number | undefined;
  environmentalSeverity?: string | number | undefined;
  temporalMetricScore?: string | number | undefined;
  temporalSeverity?: string | number | undefined;
  vectorString?: string | number | undefined;
}
interface VulnerabilityFormProps {
  id?: string; // Make the ID parameter optional
  forwardedRef?: RefObject<HTMLDialogElement> //handle to the modal this is loaded in
  setRefresh?: React.Dispatch<React.SetStateAction<boolean>> //state function to tell parent to reload data
  onClose: () => void;
}
function VulnerabilityForm({ id: vulId, forwardedRef, setRefresh, onClose }: VulnerabilityFormProps): JSX.Element {
  //calculator is loaded in the base index.html from https://www.first.org/cvss/calculator/cvsscalc31.js
  const calculate: ((vector: string | null | undefined) => CVSSReturn) | undefined = window?.CVSS31.calculateCVSSFromVector;
  
  const params = useParams()
  const [projectId, setProjectId] = useState(params.projectId)
  const [project, setProject] = useState<Project>()
  const { id: routeId } = params;
  const externalId = vulId || routeId; // Use externalId if provided, otherwise use routeId
  const [id, setId] = useState(externalId)
  const [btnDisabled, setBtnDisabled] = useState(false)
  const [loading, setLoading] = useState(false);
  const [loadingError, setLoadingError] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [accordionOpen, setAccordionOpen] = useState(false)
  const [errors, setErrors] = useState<FormErrors>({});
  const [editing, setEditing] = useState(false)

  //dialog handler for adding an instance -- only used if there is a project id
  const [showDialog, setShowDialog] = useState(false)
  
  let defaultValues:any = {
        vulnerabilityname: "",
        vulnerabilityseverity: "",
        vulnerabilitydescription: "",
        vulnerabilitysolution: "",
        vulnerabilityreferlnk: "",
        cvssvector: "CVSS:3.1/AV:/AC:/PR:/UI:/S:/C:/I:/A:",
        cvssscore: ''
  }
  if(projectId){
    defaultValues.project = projectId;
    defaultValues.poc = '';
    defaultValues.instance= [];
  }
  
  const [formData, setFormData] = useState<Vulnerability | ProjectVulnerability>(defaultValues);
  
  const [scoreData, setScoreData] =useState(parseStringToObject(formData.cvssvector ?? ""))
  const [calculatedScore, setCalculatedScore] = useState<CVSSReturn>(calculate(formData.cvssvector))

  useEffect(() => {
    const loadData = async () => {
      if (id) {
        setLoading(true);
        try {
          let vData:any
          if(projectId) {
            vData = await getVulnerability(id) as  ProjectVulnerability;
          } else {
            vData = await getVulnerability(id) as  Vulnerability;
          }
          setFormData((prevData) => ({
            ...prevData,
            ...vData
          }));
          vData.cvssvector && setScoreData(parseStringToObject(vData.cvssvector))

        } catch (error) {
          console.error("Error fetching vulnerability data:", error);
          setLoadingError(true);
          // Handle error fetching data
        } finally {
          setLoading(false);
        }
      }
    };
    loadData();
  }, [id]);
  useEffect(() => {
    const loadData = async () => {
      if (projectId) {
        setLoading(true);
        try {
          const projectData = await getProject(projectId) as Project;
          setProject(projectData as Project);

        } catch (error) {
          console.error("Error fetching vulnerability project data:", error);
          setLoadingError(true);
          // Handle error fetching data
        } finally {
          setLoading(false);
        }
      }
  };
  loadData();
}, [projectId]);
  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setEditing(true)
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  //for display of severity
  const [scoreTextColor, setScoreTextColor]=useState('blue-500')
  const [scoreMeaning, setScoreMeaning]=useState('None')
  
  //because of the cascading nature of a score change, we have two useEffect calls after a score change to make sure they happen in the right order
  const handleScoreChange = (name: string, value:string): void => {
    setEditing(true)
    setScoreData((prevScoreData) => ({
      ...prevScoreData,
      [name]: value,
    }));
  };
  
  useEffect(() => {
    const newScoreString = Object.entries(scoreData)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["cvssvector"]: newScoreString,
    }));
  }, [scoreData]);
  useEffect(() => {
    let fullScore = calculate(formData.cvssvector)
    setCalculatedScore(fullScore)
    let score = Number(fullScore?.baseMetricScore)
    const [_meaning, _textColor] = useVulnerabilityColor(score)
    setScoreTextColor(_textColor)
    setScoreMeaning(_meaning)
    //for data to save
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["vulnerabilityseverity"]: _meaning,
      ["cvssscore"]: String(fullScore.baseMetricScore),
    }));

  }, [formData.cvssvector]);
  //END cascading score change updates
  //used for modal, not currently in use
  const navigate = useNavigate()
  const closeModal = () =>  {
    setId('')
    if(forwardedRef?.current ) {
      forwardedRef.current.close()
    }
    onClose && onClose()
  }
  const handleSubmit = async(event: FormEvent<HTMLFormElement>) => {
    
    setBtnDisabled(true);
    event.preventDefault();
    const newErrors: FormErrors = {};
    // Example validation logic (replace with your own)
    if (formData.vulnerabilityname && formData.vulnerabilityname.length < 3) {
      newErrors.vulnerabilityname = { message: 'Name should be at least three characters' };
    }
    if (!formData.vulnerabilitysolution || formData.vulnerabilitysolution == '') {
      newErrors.vulnerabilitysolution = { message: 'Please enter a solution' };
    }
    if (!formData.vulnerabilitydescription || formData.vulnerabilitydescription == '') {
      newErrors.vulnerabilitydescription = { message: 'Please enter a description' };
    }
    if (Object.keys(newErrors).length >  0) {
      setErrors(newErrors);
      console.error('Form failed validation:', newErrors);
    } else {
      //if not project id, it's for the vulnerability database
      if(!projectId) {
        try {
          await upsertVulnerability(formData as Vulnerability);
          toast.success('Vulnerability saved.')
          if(setRefresh){
            setRefresh(true)
          }
          closeModal()
          navigate('/vulnerabilities')
          // Handle success (e.g., show success message, redirect, etc.)
        } catch (error) {
          console.error('Error submitting form:', error);
          setSaveError(String(error))
          // Handle error (e.g., show error message)
        } finally {
          setBtnDisabled(false);
        }
      } else {
        return addProjectVulnerability()
      }
    }
    
  }
  //this is used to add a vulnerability to a project instead of the vulern  ability database
  const addProjectVulnerability = async() => {
    if(!projectId){
      throw "projectID must be set to addProjectVulnerability"
    }
    const projectVulnerability: ProjectVulnerability = {
      ...formData,
      project: Number(projectId)
    }
    
  }
  const handleCancel = (event: FormEvent<HTMLButtonElement>):void => {
    event?.preventDefault()
    if(editing){
      if(!confirm('Quit without saving?')){
        return;
      }
    } 
    navigate(-1)
  }
  const clearDialog = () => {
    setShowDialog(false)
  }
  const handleCKchange = (name:string, value:string):void => {
    setEditing(true)
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  }
  const [newInstances, setNewInstances] = useState<{url: string, parameter: string, error:boolean}[]>([])
  const [instanceData, setInstanceData] = useState({
    url: '',
    parameter:'',
    error: false
  })
  const [instances, setInstances] = useState<{url: string, parameter: string, error:boolean}[]>([])
  const addInstance = (event:any) => {
    event.preventDefault()
    //first validate the previous instances
    if(!validateNewInstances()){
      return null
    }
    // setShowDialog(true)
    let temp = [...newInstances];
    temp.push({url: '', parameter: '', error:false})
    setNewInstances(temp)

  }
  const validateNewInstances = () => {
    //first validate the previous instances
    let valid = true;
    let check = newInstances.map((instance) =>{
      if(!validator.isURL(instance.url)){
        instance.error = true;
        valid = false
      } else {
        instance.error = false;
      }
      return instance
    })
    if(!valid){
      setNewInstances(check)      
    }
    return valid
  }
  const handleInstanceChange = (key: string, index: number, event:any) => {
    setEditing(true)
    const { value } = event.target;
    const updatedInstances = [...newInstances]; // Create a copy of the array
    updatedInstances[index] = { ...updatedInstances[index], [key]: value }; // Update the item at the specified index
    setNewInstances(updatedInstances);
    
    
  }
  const saveInstance = (event:any) => {
    if(!validator.isURL(instanceData.url)){
      setErrors((prevErrors) => ({
        ...prevErrors,
        ['url']: {message:'Enter a valid url including http(s)://'},
      }));
      return null
    }
    setErrors((prevErrors) => ({
      ...prevErrors,
      ['url']: {message:null},
    }));
    event.preventDefault()
    setInstances([
      ...instances, 
      {url: instanceData.url, 
        parameter: instanceData.parameter}
    ]);
    setInstanceData({
      url: '',
      parameter:''
    })
    console.log(instances)
    setShowDialog(false)
  }
  const removeInstance = (index: number) =>{
    const updatedInstances = [...instances];
    updatedInstances.splice(index, 1);
    setInstances(updatedInstances);
  }
  const removeNewInstance = (index: number) => {
    const updated = [...newInstances];
    updated.splice(index, 1);
    setNewInstances(updated)
  }
  const cancelInstance = (event:any) => {
    event.preventDefault()
    setShowDialog(false)
    setInstanceData({
      url: '',
      parameter:'',
      error: false
    })
    setErrors((prevErrors) => ({
      ...prevErrors,
      ['url']: {message:null},
    }));
    
  }
  //label for button differs base on whether this is being added to a project vs the vuln db
  const saveLabel =  projectId ? "Add to Project" : "Save"
  const heading = (id && projectId) ? "Add Vulnerability to Project" : (id ? "Edit Vulnerability" : "Add Vulnerability")
  // these cause a weird react problem that I haven't been able to trace
  //  if(loading) return <FormSkeleton numInputs={3}/>
  // if (loadingError) return <ModalErrorMessage message={"Error loading vulnerability"} />
  console.log('newInstances',newInstances)
  return (
    <div className="max-w-lg flex-1 rounded-lg min-h-[800px] border-black relative">
      <h1 className="mb-3 text-2xl">
          {heading}
      </h1>
      {(projectId && !project) && 
        <RowSkeleton />
      }
      {project && 
        <p className="mb-4">Project: {project.name}</p>
      }
       {saveError && <FormErrorMessage message={saveError} />}
      <form onSubmit={handleSubmit} id="vulnerabilityForm" method="POST">
       <Tabs value="summary">
       <TabsHeader>
          <Tab key="summary" value="summary">
            Summary
          </Tab>
          <Tab key="score" value="score">
            Score Calculator
          </Tab>
          {(projectId && "poc" in formData) &&
          <Tab key="poc" value="poc">
            Proof of Concept
          </Tab>
          }
       </TabsHeader>
       <TabsBody>
        <TabPanel key="summary" value="summary">
        <div className="w-full mb-4">
          <div className="relative">
            <label 
              htmlFor="vulnerabilityname"
              className={StyleLabel}>
              Name
            </label>
            <input
              name="vulnerabilityname"
              id="vulnerabilityname"
              className={StyleTextfield}
              value={formData.vulnerabilityname}
              onChange={handleChange}
              type="text"
              required={true}
            />
            {errors.vulnerabilityname?.message && <FormErrorMessage message={errors.vulnerabilityname.message} />}
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilityseverity"
              className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
              Severity
            </label>
            {scoreMeaning ? <span className={`text-[${scoreTextColor}]`}>{scoreMeaning}</span> : "Use calculator below"}
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitydescription"
              className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
              Description
            </label>
            {errors.vulnerabilitydescription?.message && <FormErrorMessage message={errors.vulnerabilitydescription.message} />}
            <CKEditor
              id="vulnerabilitydescription"
              onChange={(event, editor) => {
                handleCKchange('vulnerabilitydescription',editor.getData());
              }}
              data = {formData.vulnerabilitydescription}
              onReady={ editor => {
                    if (formData.vulnerabilitydescription) editor.setData(formData.vulnerabilitydescription)
                }}
              editor={ClassicEditor}
            />
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitysolution"
              className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
              Solution
            </label>
            {errors.vulnerabilitysolution?.message && <FormErrorMessage message={errors.vulnerabilitysolution.message} />}
            <CKEditor
              id="vulnerabilitysolution"
              data = {formData.vulnerabilitysolution}
              onChange={(event, editor) => {
                handleCKchange('vulnerabilitysolution',editor.getData());
              }}
              onReady={ editor => {
                    if (formData.vulnerabilitysolution) editor.setData(formData.vulnerabilitysolution)
                }}
              editor={ClassicEditor}
            />
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitylink"
              className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
              Links to more information
            </label>
                <CKEditor
                  id="vulnerabilityreferlnk"
                  data = {formData.vulnerabilityreferlnk}
                  onChange={(event, editor) => {
                    handleCKchange('vulnerabilityreferlnk',editor.getData());
                  }}
                  onReady={ editor => {
                        if (formData.vulnerabilityreferlnk) editor.setData(formData.vulnerabilityreferlnk)
                    }}
                  editor={ClassicEditor}
                />
          </div>
          
        </div>
        </TabPanel>
        <TabPanel key="score" value="score">
            <div className='mb-4'>
              
              Score: <span className={`text-[${scoreTextColor}]`}>
                {calculatedScore.baseMetricScore} ({scoreMeaning})
              </span>
            </div>
            <div className="flex min-w-1/2">
                <div className="column w-full">
                  <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                    <legend className='text-sm mb-0'>Attack Vector</legend>
                    <List>
                    <ScoreRadioButton name='AV' label="Network" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='AV' label="Adjacent" value="A" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='AV' label="Local" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='AV' label="Physical" value="P" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Attack Complexity</legend>
                    <List>
                    <ScoreRadioButton name='AC' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='AC' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Privileges Required</legend>
                    <List>
                    <ScoreRadioButton name='PR' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='PR' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='PR' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>User Interaction</legend>
                    <List>
                    <ScoreRadioButton name='UI' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='UI' label="Required" value="R" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                </div>
                <div className="column w-full">
                  <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Scope</legend>
                    <List>
                    <ScoreRadioButton name='S' label="Unchanged" value="U" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='S' label="Changed" value="C" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Confidentiality</legend>
                    <List>
                    <ScoreRadioButton name='C' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='C' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='C' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Integrity</legend>
                    <List>
                    <ScoreRadioButton name='I' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='I' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='I' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                  <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                    <legend className='pt-2 text-sm mb-0'>Availability</legend>
                    <List>
                    <ScoreRadioButton name='A' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='A' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                    <ScoreRadioButton name='A' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                    </List>
                  </fieldset>
                </div>
            </div>
        
        </TabPanel>
        <TabPanel key="poc" value="poc" className='min-h-96 min-w-fit'>
        {(projectId && "poc" in formData) &&
            <>
            <div className="relative">
              <label 
                htmlFor="poc"
                className='mb-1 mt-5 block text-sm font-medium text-gray-900'>
                Proof of Concept
              </label>
                  <CKEditor
                    id="poc"
                    data = {formData?.poc}
                    onChange={(event, editor) => {
                      handleCKchange('poc',editor.getData());
                    }}
                    onReady={ editor => {
                          if (formData?.poc) editor.setData(formData.poc)
                      }}
                    editor={ClassicEditor}
                  />
            </div>
            <div className="relative min-h-[400px]">
              <label 
                htmlFor="instances"
                className={StyleLabel}>
                Vulnerable URLs
                </label>
                <div className="table-auto">
                  {(instances.length > 0 || newInstances.length > 0) && (
                    <div className='flex'>
                      <div className="flex w-3/5">
                        <div className={StyleLabel}>URL</div>
                      </div>
                      <div>
                        <div className={`ml-4 ${StyleLabel}`}>Parameter</div>
                      </div>
                    </div>
                  )}
                  <div>
                    {instances.map((item, key) => {
                      return (
                        <div key={key} className="flex min-w-fit">
                          <div>{item.url}</div>
                          <div>{item.parameter}</div>
                          <div>
                            <XCircleIcon onClick={() => removeInstance(key)} className="text-secondary w-5 h-5 bg-white mr-2 cursor-pointer" />
                          </div>
                        </div>
                      );
                    })}
                    {(instances.length === 0 && newInstances.length === 0) && (
                      <div className='flex'>
                        <div >No URLs. Click Add URL to create.</div>
                      </div>
                    )}
                    {newInstances.map((item, key) => {
                      return (
                        <div key={key} className="flex min-w-fit mb-4">
                          <div className="w-3/5" key={`url-${key}`}>
                            <input
                              name={`url-${key}`}
                              autoFocus
                              id={`url-${key}`}
                              placeholder='http://www.example.com'
                              className={item.error ? `border border-red-500 ${StyleTextfield}` : StyleTextfield}
                              value={item.url}
                              onChange={(event: any) => handleInstanceChange('url', key, event)}
                              onBlur={validateNewInstances}
                              type="text"
                              required={true}
                            />
                            {item.error && <FormErrorMessage message="Invalid url" />}
                          </div>
                          <div key={`parameter-${key}`} className='ml-4 flex items-start'>
                            <input
                              name={`parameter-${key}`}
                              id={`parameter-${key}`}
                              placeholder='parameter'
                              className={StyleTextfield}
                              value={item.parameter}
                              onChange={(event: any) => handleInstanceChange('parameter', key, event)}
                              type="text"
                            />
                            <XCircleIcon onClick={() => removeNewInstance(key)} className="text-secondary w-5 h-5 bg-white ml-2 mt-2 cursor-pointer" />
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
                
                
              
                  <Button onClick={addInstance} className='bg-secondary mt-4' size='sm'>Add URL</Button>
                  <Dialog handler={clearDialog} open={showDialog} size="sm" className="modal-box w-[500px] bg-white p-4 rounded-md" >
                  <label 
                    htmlFor="url"
                    className={StyleLabel}
                  >URL
                  </label>
                  <input
                    name="url"
                    id="url"
                    className={StyleTextfield}
                    value={instanceData.url}
                    onChange={handleInstanceChange}
                    type="text"
                    required={true}
                  />
                  {errors.url?.message && <FormErrorMessage message={errors.url?.message} />}
                    <label 
                    htmlFor="parameter"
                    className={StyleLabel}
                  >Parameter</label>
                   <input
                    name="parameter"
                    id="parameter"
                    className={StyleTextfield}
                    value={instanceData.parameter}
                    onChange={handleInstanceChange}
                    type="text"
                    required={true}
                  />
                  
                  <Button onClick={saveInstance}
                    className="bg-primary cursor-pointer disabled:bg-gray-300 mt-2">
                    Add
                  </Button>
                  <Button onClick={cancelInstance}
                    className="bg-red-600 cursor-pointer disabled:bg-gray-300 mt-2 ml-2">
                    Cancel
                  </Button>
              
                  </Dialog>

            </div>
            </>
          }
        </TabPanel>
        </TabsBody>
        </Tabs>
        <div className="bottom-4 left-4">
          <Button 
            type="submit" 
            className="bg-primary cursor-pointer disabled:bg-gray-300"
            disabled = {btnDisabled}>
            {btnDisabled ? 'Saving' : saveLabel} 
          </Button>
          <Button 
            type="submit" 
            className="bg-red-600 cursor-pointer disabled:bg-gray-300 ml-2"
            onClick={handleCancel}
            disabled = {btnDisabled}>
              Cancel
          </Button>
        </div>
        
      </form>
    </div>
  );
}
type OpenIconProps = {
  open: boolean
};
function OpenIcon({ open }:OpenIconProps) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={2}
      stroke="currentColor"
      className={`${open ? "rotate-180" : ""} h-5 w-5 transition-transform`}
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  );
}

export default withAuth(VulnerabilityForm);
