import React, { 
  useState, 
  useEffect,
  ChangeEvent, 
  FormEvent,
  RefObject,
} from 'react';
import { useNavigate, useParams,  } from 'react-router-dom';
import {Button} from '../components/button'
import {
  StyleTextfield,
  StyleLabel,
  FormErrorMessage,
  
} from '../lib/formstyles'
import { withAuth } from "../lib/authutils";
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';


import ScoreRadioButton from '../components/score-radio-button'
import { FormSkeleton } from '../components/skeletons'
import { 
          Select, 
          Option, 
          Accordion,
          AccordionHeader,
          AccordionBody } from "@material-tailwind/react";
import { Vulnerability } from '../lib/data/definitions'
import { getVulnerability, upsertVulnerability} from '../lib/data/api';

import toast from 'react-hot-toast';
import {List} from "@material-tailwind/react";
interface FormErrors {
  vulnerabilityname?: {
    message: string;
  };
  vulnerabilityseverity?: {
    message: string;
  };
  vulnerabilitydescription?: {
    message: string;
  };
  vulnerabilitysolution?: {
    message: string;
  };
}
//function to break the vulnerabilitycvssvector into an object for form radio buttons
function parseStringToObject(input: string): Record<string, string | null> {
  const pairs = input.split('/').filter(Boolean); // Split string by '/' and remove empty segments
  const result: Record<string, string | null> = {};

  for (const pair of pairs) {
    const [key, value] = pair.split(':'); // Split key-value pairs by ':'
    result[key] = value !== undefined ? value : null;
  }

  return result;
}


//converts an object representation of vulnerabilitycvssvector and converts it to a string like  e.g. CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:N"
function updateStringWithKeyValuePair(input: string | null | undefined, key: string, value: string | null): string {
  if(!input) return ''
  let keyValuePairs: Record<string, string | null> = {};

  if (input) {
    keyValuePairs = parseStringToObject(input);
  }
  keyValuePairs[key] = value;

  const updatedString = Object.entries(keyValuePairs)
    .map(([k, v]) => v !== null ? `${k}:${v}` : k) // Return key if value is null
    .join('/');
  return updatedString;
}



interface VulnerabilityFormProps {
  id?: string; // Make the ID parameter optional
  forwardedRef?: RefObject<HTMLDialogElement> //handle to the modal this is loaded in
  setRefresh?: React.Dispatch<React.SetStateAction<boolean>> //state function to tell parent to reload data
  onClose: () => void;
}
function VulnerabilityForm({ id: vulId, forwardedRef, setRefresh, onClose }: VulnerabilityFormProps): JSX.Element {
  const params = useParams()
  const { id: routeId } = params;
  const externalId = vulId || routeId; // Use externalId if provided, otherwise use routeId
  const [id, setId] = useState(externalId)
  
  const [btnDisabled, setBtnDisabled] = useState(false)
  const [loading, setLoading] = useState(false);
  const [loadingError, setLoadingError] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [accordionOpen, setAccordionOpen] = useState(false)
  const [errors, setErrors] = useState<FormErrors>({});
  const [editing, setEditing] = useState(false)
  
  
  const [formData, setFormData] = useState<Vulnerability>({
      vulnerabilityname: "",
      vulnerabilityseverity: "",
      vulnerabilitydescription: "",
      vulnerabilitysolution: "",
      vulnerabilityreferlnk: "",
      cvssvector: "CVSS:/AV:/AC:/PR:/UI:/S:/C:/I:/A:",
      cvssscore: ''
      });
  
  
  const [scoreData, setScoreData] =useState(parseStringToObject(formData.cvssvector ?? ""))
 
  

  useEffect(() => {
    const loadData = async () => {
      if (id) {
        setLoading(true);
        try {
          const vData = await getVulnerability(id) as Vulnerability;
          
          setFormData(vData);
          vData.cvssvector && setScoreData(parseStringToObject(vData.cvssvector))

        } catch (error) {
          console.error("Error fetching vulnerability data:", error);
          setLoadingError(true);
          // Handle error fetching data
        } finally {
          setLoading(false);
        }
      }
    };

    loadData();
  }, [id]);
  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setEditing(true)
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  //material-tailwind doesn't use the standard event handler, so this custom function pipes the value to handelChange
  const handleSeverityChange = (value: string | undefined) => {
    setEditing(true)
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["vulnerabilityseverity"]: value,
    }));
}
  const handleScoreChange = (name: string, value:string): void => {
    setEditing(true)
    setScoreData((prevScoreData) => ({
      ...prevScoreData,
      [name]: value,
    }));
    const newScoreString = updateStringWithKeyValuePair(formData.cvssvector, name, value)
    setFormData((prevFormData) => ({
      ...prevFormData,
      ["cvssvector"]: newScoreString,
    }));
  };
  const navigate = useNavigate()
  const closeModal = () =>  {
    setId('')
    if(forwardedRef?.current ) {
      forwardedRef.current.close()
    }
    onClose && onClose()
  }
  const handleSubmit = async(event: FormEvent<HTMLFormElement>) => {
    setBtnDisabled(true);
    event.preventDefault();
    const newErrors: FormErrors = {};
    // Example validation logic (replace with your own)
    if (formData.vulnerabilityname && formData.vulnerabilityname.length < 3) {
      newErrors.vulnerabilityname = { message: 'Name should be at least three characters' };
    }
    if (!formData.vulnerabilityseverity || formData.vulnerabilityseverity == '') {
      newErrors.vulnerabilityseverity = { message: 'Please select a severity' };
    }
    if (!formData.vulnerabilitysolution || formData.vulnerabilitysolution == '') {
      newErrors.vulnerabilitysolution = { message: 'Please enter a solution' };
    }
    if (!formData.vulnerabilitydescription || formData.vulnerabilitydescription == '') {
      newErrors.vulnerabilitydescription = { message: 'Please enter a description' };
    }
    if (Object.keys(newErrors).length >  0) {
      setErrors(newErrors);
      console.error('Form failed validation:', newErrors);
    } else {
      try {

        const response = await upsertVulnerability(formData as Vulnerability);
        toast.success('Vulnerability saved.')
        if(setRefresh){
          setRefresh(true)
        }
        closeModal()
        // Handle success (e.g., show success message, redirect, etc.)
      } catch (error) {
        console.error('Error submitting form:', error);
        setSaveError(String(error))
        // Handle error (e.g., show error message)
      }
    }
    setBtnDisabled(false);
  }
  const handleCancel = (event: FormEvent<HTMLButtonElement>):void => {
    event?.preventDefault()
    if(editing){
      if(!confirm('Quit without saving?')){
        return;
      }
    } 
    navigate('/vulnerabilities')
  }
 
  const handleCKchange = (name:string, value:string):void => {
    setEditing(true)
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  }
  //  if(loading) return <FormSkeleton numInputs={3}/>
  // if (loadingError) return <ModalErrorMessage message={"Error loading company"} />
  return (
    <div className="max-w-lg flex-1 rounded-lg">
      <form onSubmit={handleSubmit} id="vulnerabilityForm" method="POST">
        <h1 className="mb-3 text-2xl">
          {id ? "Edit" : "Create"} Vulnerability
        </h1>
        {saveError && <FormErrorMessage message={saveError} />}
        
        <div className="w-full mb-4">
          <div className="relative">
            <label 
              htmlFor="vulnerabilityname"
              className={StyleLabel}>
              Name
            </label>
            <input
              name="vulnerabilityname"
              id="vulnerabilityname"
              className={StyleTextfield}
              value={formData.vulnerabilityname}
              onChange={handleChange}
              type="text"
              required={true}
            />
            {errors.vulnerabilityname?.message && <FormErrorMessage message={errors.vulnerabilityname.message} />}
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilityseverity"
              className='mb-1 mt-5 block text-xs font-medium text-gray-900'>
              Severity
            </label>
            
            <Select name='vulnerabilityseverity' 
              size="md"
              onChange={handleSeverityChange}
              className='pl-4 pb-5 rounded-md'
              value={formData.vulnerabilityseverity}
              
              >
              <Option value="" className='hover:bg-slate-200 p-2'>Select...</Option>
              <Option value="None" className='hover:bg-slate-200 p-2'>None</Option>
              <Option value="Low" className='hover:bg-slate-200 p-2'>Low</Option>
              <Option value="Medium" className='hover:bg-slate-200 p-2'>Medium</Option>
              <Option value="High" className='hover:bg-slate-200 p-2'>High</Option>
              <Option value="Critical" className='hover:bg-slate-200 p-2'>Critical</Option>
            </Select>
            
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitydescription"
              className='mb-1 mt-5 block text-xs font-medium text-gray-900'>
              Description
            </label>
                <CKEditor
                  id="vulnerabilitydescription"
                  onChange={(event, editor) => {
                    handleCKchange('vulnerabilitydescription',editor.getData());
                  }}
                  data = {formData.vulnerabilitydescription}
                  onReady={ editor => {
                        if (formData.vulnerabilitydescription) editor.setData(formData.vulnerabilitydescription)
                    }}
                  
                  editor={ClassicEditor}
                  
                />
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitysolution"
              className='mb-1 mt-5 block text-xs font-medium text-gray-900'>
              Solution
            </label>
                <CKEditor
                  id="vulnerabilitysolution"
                  data = {formData.vulnerabilitysolution}
                  onChange={(event, editor) => {
                    handleCKchange('vulnerabilitysolution',editor.getData());
                  }}
                  onReady={ editor => {
                        if (formData.vulnerabilitysolution) editor.setData(formData.vulnerabilitysolution)
                    }}
                  
                  editor={ClassicEditor}
                  
                />
          </div>
          <div className="relative">
            <label 
              htmlFor="vulnerabilitylink"
              className='mb-1 mt-5 block text-xs font-medium text-gray-900'>
              Links to more information
            </label>
                <CKEditor
                  id="vulnerabilityreferlnk"
                  data = {formData.vulnerabilityreferlnk}
                  onChange={(event, editor) => {
                    handleCKchange('vulnerabilityreferlnk',editor.getData());
                  }}
                  onReady={ editor => {
                        if (formData.vulnerabilityreferlnk) editor.setData(formData.vulnerabilityreferlnk)
                    }}
                  
                  editor={ClassicEditor}
                  
                />
          </div>
        </div>
        
        <fieldset className="mt-8 mr-0 text-lg form-control mb-4 rounded-md p-2 px-3 border-2 border-slate-200" >
          <Accordion className='pt-0' open={accordionOpen} icon={<OpenIcon open={accordionOpen} />}>
            <AccordionHeader 
              onClick={() => setAccordionOpen(!accordionOpen)} 
              className='border-b-0 py-0 text-md'>
              Base Score Calculator
            </AccordionHeader>
            <AccordionBody>
              <div className="flex min-w-1/2">
                  <div className="column w-full">
                    <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                      <legend className='text-sm mb-0'>Attack Vector</legend>
                      <List>
                      <ScoreRadioButton name='AV' label="Network" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='AV' label="Adjacent" value="A" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='AV' label="Local" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='AV' label="Physical" value="P" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Attack Complexity</legend>
                      <List>
                      <ScoreRadioButton name='AC' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='AC' label="High" value="A" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Privileges Required</legend>
                      <List>
                      <ScoreRadioButton name='PR' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='PR' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='PR' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="mr-0 form-control rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>User Interaction</legend>
                      <List>
                      <ScoreRadioButton name='UI' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='UI' label="Required" value="R" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                  </div>
              
                  <div className="column w-full">
                    <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Scope</legend>
                      <List>
                      <ScoreRadioButton name='S' label="Unchanged" value="U" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='S' label="Changed" value="C" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Confidentiality</legend>
                      <List>
                      <ScoreRadioButton name='C' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='C' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='C' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Integrity</legend>
                      <List>
                      <ScoreRadioButton name='I' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='I' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='I' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                    <fieldset className="form-control mb-4 rounded-md p-0 mt-0" >
                      <legend className='pt-2 text-sm mb-0'>Availability</legend>
                      <List>
                      <ScoreRadioButton name='A' label="None" value="N" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='A' label="Low" value="L" scoreData={scoreData} onChange={handleScoreChange}/>
                      <ScoreRadioButton name='A' label="High" value="H" scoreData={scoreData} onChange={handleScoreChange}/>
                      </List>
                    </fieldset>
                  </div>
                
              </div>
            </AccordionBody>
          </Accordion>
        </fieldset>
        <div className="relative flex">
          <Button 
            type="submit" 
            className="bg-primary disabled:bg-gray-300"
            
            disabled = {btnDisabled}>
              
            {btnDisabled ? 'Saving' : 'Save'} 
          </Button>
          <Button 
            type="submit" 
            className="bg-error disabled:bg-gray-300 ml-2"
            onClick={handleCancel}
            disabled = {btnDisabled}>
              Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}
type OpenIconProps = {
  open: boolean
};
function OpenIcon({ open }:OpenIconProps) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={2}
      stroke="currentColor"
      className={`${open ? "rotate-180" : ""} h-5 w-5 transition-transform`}
    >
      <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  );
}

export default withAuth(VulnerabilityForm);
